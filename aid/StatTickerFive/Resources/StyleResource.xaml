<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"        
	                xmlns:c="http://schemas.microsoft.com/wpf/2008/toolkit"  
                    xmlns:tk="http://schemas.xceed.com/wpf/xaml/toolkit" 
                    xmlns:xwpf="http://schemas.microsoft.com/winfx/2006/xaml/presentation/toolkit/extended"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:StatTickerFive.Converters"
                    xmlns:helpers="clr-namespace:StatTickerFive.Helpers"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="/StatTickerFive;component/Resources/Common.xaml" />
    </ResourceDictionary.MergedDictionaries>
    <helpers:Settings x:Key="colorSource"></helpers:Settings>
    <local:ScrollbarOnFarRightConverter x:Key="scrollbarOnFarRightConverter"/>
    <local:ScrollbarOnFarLeftConverter x:Key="scrollbarOnFarLeftConverter"/>


    <LinearGradientBrush x:Key="DisabledBorderBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="Orange" Offset="0" />
                <GradientStop Color="#C0C0C1" Offset="0.25" />
                <GradientStop Color="#C0C0C0" Offset="0.75" />
                <GradientStop Color="Orange"  Offset="1" />
                <!--#808080-->
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="TabItemBrush" StartPoint="1,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="Orange" Offset="0" />
                <GradientStop Color="#ffc14e" Offset="0.25" />
                <GradientStop Color="#ffcf76" Offset="0.5" />
                <GradientStop Color="#ffb327" Offset="0.75" />
                <GradientStop Color="Orange"  Offset="1" />
                <!--#808080-->
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="GridBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#FFF" Offset="1"/>
                <GradientStop Color="Gray" Offset="0.5"/>
                <GradientStop Color="Gray" Offset="0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="GradiantBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#FFF" Offset="0"/>
                <!--<GradientStop Color="Gray" Offset="0.5"/>-->
                <GradientStop Color="Black" Offset="1"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="GradiantBrush1" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#FFF" Offset="0"/>
                <GradientStop Color="Gray" Offset="0.9"/>
                <GradientStop Color="Black" Offset="-1"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="OpticBrush" StartPoint="1,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="Black" Offset="1.0"/>
                <GradientStop Color="#AAA" Offset="0.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="GradiantBrush2" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#FFF" Offset="0"/>
                <GradientStop Color="#B6B6B6" Offset="1"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="DarkBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#FFF" Offset="0.0"/>
                <GradientStop Color="#AAA" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="PressedBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#BBB" Offset="0.0"/>
                <GradientStop Color="#EEE" Offset="0.1"/>
                <GradientStop Color="#EEE" Offset="0.9"/>
                <GradientStop Color="#FFF" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="NormalBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#FFF" Offset="0.0"/>
                <GradientStop Color="#CCC" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="NormalBrush1" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#FFF" Offset="0.0"/>
                <GradientStop Color="Black" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="HorizontalNormalBrush" StartPoint="0,0" EndPoint="1,0">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#FFF" Offset="0.0"/>
                <GradientStop Color="#CCC" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="LightBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#FFF" Offset="0.0"/>
                <GradientStop Color="#EEE" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="HorizontalLightBrush" StartPoint="0,0" EndPoint="1,0">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#FFF" Offset="0.0"/>
                <GradientStop Color="#EEE" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="NormalBorderBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#CCC" Offset="0.0"/>
                <GradientStop Color="#444" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="HorizontalNormalBorderBrush" StartPoint="0,0" EndPoint="1,0">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#CCC" Offset="0.0"/>
                <GradientStop Color="#444" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="DefaultedBorderBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#777" Offset="0.0"/>
                <GradientStop Color="#000" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="PressedBorderBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#444" Offset="0.0"/>
                <GradientStop Color="#888" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="Tile" StartPoint="1,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="White" Offset="0" />
                <GradientStop Color="AliceBlue" Offset="0.55" />
                <GradientStop Color="#808080"  Offset="1" />
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="GlassBrush" StartPoint="0,0" EndPoint="1,0">
        <GradientStop Offset="0" Color="#66ffffff"/>
        <GradientStop Offset="0" Color="#36FFFFFF"/>
        <GradientStop Offset="1" Color="#B5EBE7E7"/>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="CBorderBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#707f8b" Offset="1" />
                <GradientStop Color="#c6cdd1"  Offset="0.1" />
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <SolidColorBrush x:Key="DisabledForegroundBrush" Color="#888" />

    <SolidColorBrush x:Key="DisabledBackgroundBrush" Color="#888" />

    <SolidColorBrush x:Key="WindowBackgroundBrush" Color="#FFF" />

    <SolidColorBrush x:Key="SelectedBackgroundBrush" Color="#DDD" />

    <SolidColorBrush x:Key="LightBorderBrush" Color="#AAA" />

    <SolidColorBrush x:Key="GlyphBrush" Color="#444" />

    <SolidColorBrush x:Key="LightColorBrush" Color="#DDD" />

    <SolidColorBrush x:Key="SolidBorderBrush" Color="#888" />

    <SolidColorBrush x:Key="DisabledBorderBrush1" Color="#AAA" />

    <SolidColorBrush x:Key="HighlightedBrush" Color="#CEE7F7" />


    <ControlTemplate x:Key="controltempTextbox" TargetType="{x:Type TextBoxBase}">
        <Border               
                Padding="2"
                Background="White"
                BorderBrush="#ADAAAD"
                BorderThickness="1" TextBlock.FontFamily="Calibri">
            <ScrollViewer Margin="0" x:Name="PART_ContentHost"/>
        </Border>

    </ControlTemplate>

    <ControlTemplate x:Key="controltempPasswordbox" TargetType="{x:Type PasswordBox}">
        <Border               
                Padding="2"
                Background="White"
                BorderBrush="#ADAAAD"
                BorderThickness="1" TextBlock.FontFamily="Calibri">
            <ScrollViewer Margin="0" x:Name="PART_ContentHost"/>
        </Border>
    </ControlTemplate>

    <!--Expander style strats-->
    <ControlTemplate x:Key="AnimatedExpanderButtonTemp"
                         TargetType="{x:Type ToggleButton}">
        <Border x:Name="ExpanderButtonBorder"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    Padding="{TemplateBinding Padding}">
            <Grid VerticalAlignment="Top">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <Rectangle Fill="Transparent"
                               Grid.ColumnSpan="2" />
                <Ellipse Name="Circle"
                             Grid.Column="0"
                             Stroke="DarkGray"
                             Width="20"
                             Height="20"
                             HorizontalAlignment="Center"
                             VerticalAlignment="Center" />
                <Path x:Name="Arrow"
                          Grid.Column="0"
                          Data="M 1,1.5 L 4.5,5 8,1.5"
                          Stroke="#FF666666"
                          StrokeThickness="2"
                          HorizontalAlignment="Center"
                          VerticalAlignment="Center"
                          RenderTransformOrigin="0.5,0.5">
                    <Path.RenderTransform>
                        <RotateTransform Angle="0" />
                    </Path.RenderTransform>
                </Path>
                <ContentPresenter x:Name="HeaderContent"
                                      Grid.Column="1"
                                      Margin="4,0,0,0" VerticalAlignment="Center"
                                      ContentSource="Content" />
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <!-- Animate arrow when toggled-->
            <Trigger Property="IsChecked"
                         Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="Arrow"
                                                 Storyboard.TargetProperty="(Path.RenderTransform).(RotateTransform.Angle)"
                                                 To="180"
                                                 Duration="0:0:0.4" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="Arrow"
                                                 Storyboard.TargetProperty="(Path.RenderTransform).(RotateTransform.Angle)"
                                                 To="0"
                                                 Duration="0:0:0.4" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>

            <!-- MouseOver, Pressed behaviours-->
            <Trigger Property="IsMouseOver"
                         Value="true">
                <Setter Property="Stroke"
                            Value="#808080"
                            TargetName="Circle" />
            </Trigger>
            <Trigger Property="IsPressed"
                         Value="true">
                <Setter Property="Fill"
                            Value="#808080"
                            TargetName="Circle" />
                <Setter Property="Stroke"
                            Value="White"
                            TargetName="Arrow" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- Stretch Out Content Expander's Template,
        Uses: AnimatedExpanderButtonTemp from above-->
    <ControlTemplate x:Key="StretchyExpanderTemp"
                         TargetType="{x:Type Expander}">
        <DockPanel>
            <ToggleButton x:Name="ExpanderButton" Height="35"
                              DockPanel.Dock="Top" BorderBrush="#808080" BorderThickness="0,0,0,1"
                              Template="{StaticResource AnimatedExpanderButtonTemp}"
                              Content="{TemplateBinding Header}"
                              IsChecked="{Binding Path=IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                              OverridesDefaultStyle="True"
                              Padding="1.5,0">
            </ToggleButton>
            <ContentPresenter x:Name="ExpanderContent"
                                  ContentSource="Content"
                                  DockPanel.Dock="Bottom">
                <ContentPresenter.LayoutTransform>
                    <ScaleTransform ScaleY="0" />
                </ContentPresenter.LayoutTransform>
            </ContentPresenter>
        </DockPanel>
        <ControlTemplate.Triggers>
            <Trigger Property="IsExpanded"
                         Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="ExpanderContent"
                                                 Storyboard.TargetProperty="(ContentPresenter.LayoutTransform).(ScaleTransform.ScaleY)"
                                                 To="1"
                                                 Duration="0:0:0.4" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="ExpanderContent"
                                                 Storyboard.TargetProperty="(ContentPresenter.LayoutTransform).(ScaleTransform.ScaleY)"
                                                 To="0"
                                                 Duration="0:0:0.4" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>

        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- Simple Expander Button's Template-->
    <ControlTemplate x:Key="SimpleExpanderButtonTemp"
                         TargetType="{x:Type ToggleButton}">
        <Border x:Name="ExpanderButtonBorder"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    Padding="{TemplateBinding Padding}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <Rectangle Fill="Transparent"
                               Grid.ColumnSpan="2" />
                <Ellipse Name="Circle"
                             Grid.Column="0"
                             Stroke="White"
                             Width="20"
                             Height="20"
                             HorizontalAlignment="Center"
                             VerticalAlignment="Center" />
                <Path x:Name="Arrow"
                          Grid.Column="0"
                          Data="M 1,1.5 L 4.5,5 8,1.5"
                          Stroke="White"
                          StrokeThickness="2"
                          HorizontalAlignment="Center"
                          VerticalAlignment="Center"
                          RenderTransformOrigin="0.5,0.5">
                    <Path.RenderTransform>
                        <RotateTransform Angle="0" />
                    </Path.RenderTransform>
                </Path>
                <ContentPresenter x:Name="HeaderContent"
                                      Grid.Column="1"
                                      Margin="4,0,0,0"
                                      ContentSource="Content" />
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <!--Change the sign to minus when toggled-->
            <Trigger Property="IsChecked"
                         Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="Arrow"
                                                 Storyboard.TargetProperty="(Path.RenderTransform).(RotateTransform.Angle)"
                                                 To="180"
                                                 Duration="0:0:0.4" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="Arrow"
                                                 Storyboard.TargetProperty="(Path.RenderTransform).(RotateTransform.Angle)"
                                                 To="0"
                                                 Duration="0:0:0.4" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>

        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- Simple Expander Template-->
    <ControlTemplate x:Key="SimpleExpanderTemp"
                         TargetType="{x:Type Expander}">
        <DockPanel>
            <ToggleButton x:Name="ExpanderButton"
                              DockPanel.Dock="Top"
                              Template="{StaticResource SimpleExpanderButtonTemp}"
                              Content="{TemplateBinding Header}"
                              IsChecked="{Binding Path=IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                              OverridesDefaultStyle="True"
                              Padding="1.5,0">
            </ToggleButton>
            <ContentPresenter x:Name="ExpanderContent"
                                  Grid.Row="1"
                                  Visibility="Collapsed"
                                  DockPanel.Dock="Bottom" />
        </DockPanel>
        <ControlTemplate.Triggers>
            <Trigger Property="IsExpanded"
                         Value="True">
                <Setter TargetName="ExpanderContent"
                            Property="Visibility"
                            Value="Visible" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--Expander style stops-->

    <!-- Combobox styling start -->
    <ControlTemplate x:Key="ComboBoxToggleButton" TargetType="ToggleButton">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="20" />
            </Grid.ColumnDefinitions>
            <Border
      x:Name="Border" 
      Grid.ColumnSpan="2"
      Background="White"
      BorderBrush="#ADAAAD"
      BorderThickness="1" />
            <Border 
      Grid.Column="0"
      Margin="1" 
      Background="Transparent"
      BorderThickness="0,0,0,0" />
            <Path 
      x:Name="Arrow"
      Grid.Column="1"     
      Fill="#737573"
      HorizontalAlignment="Center"
      VerticalAlignment="Center"
      Data="M 0 0 L 4 4 L 8 0 Z"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="ToggleButton.IsMouseOver" Value="true">
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="true">
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">

            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="ComboBoxTextBox" TargetType="TextBox">
        <Border x:Name="PART_ContentHost" Focusable="False" Background="{TemplateBinding Background}" />
    </ControlTemplate>

    <Style x:Key="ScrollBarLineButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border 
          Name="Border"
          Margin="1" 
          Background="White"
          BorderBrush="#ADAAAD"
          BorderThickness="1">
                        <Path 
            HorizontalAlignment="Center"
            VerticalAlignment="Center"
            Fill="#737573"
            Data="{Binding Path=Content,RelativeSource={RelativeSource TemplatedParent}}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Border" Property="BorderBrush" Value="Black"></Setter>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="Border" Property="BorderBrush" Value="Black"></Setter>
                            <Setter TargetName="Border" Property="Background" Value="#F7F3F7" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">

                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ScrollBarPageButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Background="#F7F3F7" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ScrollBarThumb" TargetType="{x:Type Thumb}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Name="Border"
          Background="White"
          BorderBrush="#ADAAAD"
          BorderThickness="1" />
                    <ControlTemplate.Triggers>
                        <Trigger Property="Thumb.IsMouseOver" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="#F7F3F7" />
                        </Trigger>
                        <Trigger Property="Thumb.IsDragging" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="#F7F3F7" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="Black" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">

                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- styled to change vertical and horizontal scrollbars start-->
    <ControlTemplate x:Key="VerticalScrollBar" TargetType="{x:Type ScrollBar}">
        <Grid >
            <Grid.RowDefinitions>
                <RowDefinition  MaxHeight="18"/>
                <RowDefinition Height="0.00001*"/>
                <RowDefinition MaxHeight="18"/>
            </Grid.RowDefinitions>
            <Border
      Grid.RowSpan="3"
      Background="#F0F0F0" />
            <RepeatButton 
      Grid.Row="0"                           
      Style="{StaticResource ScrollBarLineButton}"
      Height="18"
      Command="ScrollBar.LineUpCommand"
      Content="M 0 4 L 8 4 L 4 0 Z" />
            <Track 
      Name="PART_Track"
      Grid.Row="1"
      IsDirectionReversed="true">
                <Track.DecreaseRepeatButton>
                    <RepeatButton 
          Style="{StaticResource ScrollBarPageButton}"
          Command="ScrollBar.PageUpCommand" />
                </Track.DecreaseRepeatButton>
                <Track.Thumb>
                    <Thumb 
          Style="{StaticResource ScrollBarThumb}" 
          Margin="1,0,1,0"  
          Background="{StaticResource HorizontalNormalBrush}"
          BorderBrush="{StaticResource HorizontalNormalBorderBrush}" />
                </Track.Thumb>
                <Track.IncreaseRepeatButton>
                    <RepeatButton 
          Style="{StaticResource ScrollBarPageButton}"
          Command="ScrollBar.PageDownCommand" />
                </Track.IncreaseRepeatButton>
            </Track>
            <RepeatButton 
      Grid.Row="3" 
      Style="{StaticResource ScrollBarLineButton}"
      Height="18"
      Command="ScrollBar.LineDownCommand"
      Content="M 0 0 L 4 4 L 8 0 Z"/>
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="HorizontalScrollBar" TargetType="{x:Type ScrollBar}">
        <Grid >
            <Grid.ColumnDefinitions>
                <ColumnDefinition MaxWidth="18"/>
                <ColumnDefinition Width="0.00001*"/>
                <ColumnDefinition MaxWidth="18"/>
            </Grid.ColumnDefinitions>
            <Border
      Grid.ColumnSpan="3"
      Background="#F0F0F0" />
            <RepeatButton 
      Grid.Column="0"                           
      Style="{StaticResource ScrollBarLineButton}"
      Width="18"
      Command="ScrollBar.LineLeftCommand"
      Content="M 4 0 L 4 8 L 0 4 Z" />
            <Track 
      Name="PART_Track"
      Grid.Column="1"
      IsDirectionReversed="False">
                <Track.DecreaseRepeatButton>
                    <RepeatButton 
          Style="{StaticResource ScrollBarPageButton}"
          Command="ScrollBar.PageLeftCommand" />
                </Track.DecreaseRepeatButton>
                <Track.Thumb>
                    <Thumb 
          Style="{StaticResource ScrollBarThumb}" 
          Margin="0,1,0,1"  
          Background="{StaticResource NormalBrush}"
          BorderBrush="{StaticResource NormalBorderBrush}" />
                </Track.Thumb>
                <Track.IncreaseRepeatButton>
                    <RepeatButton 
          Style="{StaticResource ScrollBarPageButton}"
          Command="ScrollBar.PageRightCommand" />
                </Track.IncreaseRepeatButton>
            </Track>
            <RepeatButton 
      Grid.Column="3" 
      Style="{StaticResource ScrollBarLineButton}"
      Width="18"
      Command="ScrollBar.LineRightCommand"
      Content="M 0 0 L 4 4 L 0 8 Z"/>
        </Grid>
    </ControlTemplate>
    <!-- styled to change vertical and horizontal scrollbars end-->

    <ControlTemplate x:Key="DataGridVerticalScrollBar" TargetType="{x:Type ScrollViewer}">
        <Grid >
            <Grid.RowDefinitions>
                <RowDefinition  MaxHeight="18"/>
                <RowDefinition Height="0.00001*"/>
                <RowDefinition MaxHeight="18"/>
            </Grid.RowDefinitions>
            <Border
      Grid.RowSpan="3"
      Background="#F0F0F0" />
            <RepeatButton 
      Grid.Row="0"                           
      Style="{StaticResource ScrollBarLineButton}"
      Height="18"
      Command="ScrollBar.LineUpCommand"
      Content="M 0 4 L 8 4 L 4 0 Z" />
            <Track 
      Name="PART_Track"
      Grid.Row="1"
      IsDirectionReversed="true">
                <Track.DecreaseRepeatButton>
                    <RepeatButton 
          Style="{StaticResource ScrollBarPageButton}"
          Command="ScrollBar.PageUpCommand" />
                </Track.DecreaseRepeatButton>
                <Track.Thumb>
                    <Thumb 
          Style="{StaticResource ScrollBarThumb}" 
          Margin="1,0,1,0"  
          Background="{StaticResource HorizontalNormalBrush}"
          BorderBrush="{StaticResource HorizontalNormalBorderBrush}" />
                </Track.Thumb>
                <Track.IncreaseRepeatButton>
                    <RepeatButton 
          Style="{StaticResource ScrollBarPageButton}"
          Command="ScrollBar.PageDownCommand" />
                </Track.IncreaseRepeatButton>
            </Track>
            <RepeatButton 
      Grid.Row="3" 
      Style="{StaticResource ScrollBarLineButton}"
      Height="18"
      Command="ScrollBar.LineDownCommand"
      Content="M 0 0 L 4 4 L 8 0 Z"/>
        </Grid>
    </ControlTemplate>

    <Style TargetType="{x:Type ComboBoxItem}">
        <Setter Property="Foreground" Value="#737573"/>
        <Setter Property="Height" Value="20"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border x:Name="Bd"
                    SnapsToDevicePixels="true"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    Padding="{TemplateBinding Padding}">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsHighlighted" Value="true">
                            <Setter Property="Background" Value="{StaticResource HighlightedBrush}" />
                            <Setter Property="FontSize" Value="12" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="true">
                            <Setter Property="FontSize" Value="12" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style  TargetType="ComboBox">
        <!--x:Key="{x:Type ComboBox}"-->
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBox">
                    <Grid>
                        <ToggleButton 
            Name="ToggleButton" 
            Template="{StaticResource ComboBoxToggleButton}" 
            Grid.Column="2" 
            Focusable="false"
            IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
            ClickMode="Press">
                        </ToggleButton>
                        <ContentPresenter
            Name="ContentSite"
            IsHitTestVisible="False" 
            Content="{TemplateBinding SelectionBoxItem}"
            ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
            ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
            Margin="3,3,23,3"
            VerticalAlignment="Center"
            HorizontalAlignment="Left" />
                        <TextBox UndoLimit="10" x:Name="PART_EditableTextBox"
            Style="{x:Null}" FlowDirection="LeftToRight" Width="210"
            HorizontalAlignment="Left" BorderBrush="Transparent"
            VerticalAlignment="Top" Height="18" HorizontalContentAlignment="Left" VerticalContentAlignment="Top"
            Margin="2,2,23,3"
            Focusable="True" 
            Background="Transparent"
            Visibility="Hidden"
            IsReadOnly="{TemplateBinding IsReadOnly}" BorderThickness="0" />
                        <Popup 
            Name="Popup"
            Placement="Bottom"
            IsOpen="{TemplateBinding IsDropDownOpen}"
            AllowsTransparency="True" 
            Focusable="False"
            PopupAnimation="Slide">
                            <Grid 
              Name="DropDown"
              SnapsToDevicePixels="True"                
              MinWidth="{TemplateBinding ActualWidth}"
              MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                <Border 
                x:Name="DropDownBorder"
                Background="{StaticResource WindowBackgroundBrush}"
                BorderThickness="1,0,1,1"
                BorderBrush="#ADAAAD"/>
                                <ScrollViewer Margin="4,6,4,6" SnapsToDevicePixels="True">
                                    <ScrollViewer.Resources>
                                        <Style x:Key="{x:Type ScrollBar}" TargetType="{x:Type ScrollBar}">
                                            <Setter Property="SnapsToDevicePixels" Value="True"/>
                                            <Setter Property="OverridesDefaultStyle" Value="true"/>
                                            <Style.Triggers>
                                                <Trigger Property="Orientation" Value="Horizontal">
                                                    <Setter Property="Width" Value="Auto"/>
                                                    <Setter Property="Height" Value="18" />
                                                    <Setter Property="Template" Value="{StaticResource HorizontalScrollBar}" />
                                                </Trigger>
                                                <Trigger Property="Orientation" Value="Vertical">
                                                    <Setter Property="Width" Value="18"/>
                                                    <Setter Property="Height" Value="Auto" />
                                                    <Setter Property="Template" Value="{StaticResource VerticalScrollBar}" />
                                                </Trigger>
                                            </Style.Triggers>
                                        </Style>
                                    </ScrollViewer.Resources>
                                    <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="PART_EditableTextBox" Property="Background" Value="{StaticResource DisabledBackgroundBrush}" />
                            <Setter TargetName="ToggleButton" Property="IsEnabled" Value="False"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="True">
                            <Setter TargetName="ToggleButton" Property="IsEnabled" Value="True"/>
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </Trigger>
                        <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="true">
                            <Setter TargetName="DropDownBorder" Property="Margin" Value="1,0,0,0"/>
                        </Trigger>
                        <Trigger Property="IsEditable" Value="true">
                            <Setter Property="IsTabStop" Value="false"/>
                            <Setter TargetName="PART_EditableTextBox" Property="Visibility"	Value="Visible"/>
                            <Setter TargetName="ContentSite" Property="Visibility" Value="Hidden"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
        </Style.Triggers>
    </Style>
    <!-- Combobox styling end -->

    <Style x:Key="PinButton"  TargetType="Button">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="OnMouseEnter1">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="content" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1.4"/>
                                <SplineDoubleKeyFrame KeyTime="00:00:01" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="content" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1.4"/>
                                <SplineDoubleKeyFrame KeyTime="00:00:01" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Border Name="Border" Background="Transparent">
                        <ContentPresenter Name="content" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                      Margin="{TemplateBinding Padding}"
                                      RecognizesAccessKey="True"
                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <ContentPresenter.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform ScaleX="1" ScaleY="1"/>
                                    <SkewTransform AngleX="0" AngleY="0"/>
                                    <RotateTransform Angle="0"/>
                                    <TranslateTransform X="0" Y="0"/>
                                </TransformGroup>
                            </ContentPresenter.RenderTransform>
                        </ContentPresenter>
                    </Border>
                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="Mouse.MouseEnter">
                            <BeginStoryboard Storyboard="{StaticResource OnMouseEnter1}"/>
                        </EventTrigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="#d6ebff"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="#94c3e7"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="NormalImageButton"  TargetType="Button">

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">

                    <Border Name="Border" Background="Transparent">
                        <ContentPresenter Name="content" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                      Margin="{TemplateBinding Padding}"
                                      RecognizesAccessKey="True"
                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="BorderThickness" Value=".89"/>
                            <Setter TargetName="Border" Property="BorderBrush" Value="White"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">

                            <Setter TargetName="Border" Property="Background" Value=" #94c3e7"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ImageButton" TargetType="Button">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Name="Border" CornerRadius="2" Background="#FFFFFF" BorderBrush="#D6D7D6">
                        <ContentPresenter Name="content" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                      Margin="{TemplateBinding Padding}"
                                      RecognizesAccessKey="True"
                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="#D6D7D6"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ClearButton" TargetType="RepeatButton">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Name="Border" CornerRadius="2" Background="#FFCC00" TextBlock.Foreground="White" TextBlock.FontFamily="Calibri" TextBlock.FontSize="14">
                        <ContentPresenter Name="content" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                      Margin="{TemplateBinding Padding}"
                                      RecognizesAccessKey="True"
                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="#b28e00"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="NormalButton1" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}"> 
                    <Border x:Name="Border" CornerRadius="0,0,2,2" Background="Transparent" BorderBrush="Transparent"
                        BorderThickness="1,0,1,1">
                        <Path x:Name="Arrow" Fill="White" HorizontalAlignment="Center" VerticalAlignment="Bottom" Data="M 0 0 L 4 4 L 8 0 Z"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="#007edf"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="#0061ac"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="NormalButton" TargetType="Button">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Name="Border" CornerRadius="2" Background="#939589" TextBlock.Foreground="White" TextBlock.FontFamily="Calibri" TextBlock.FontSize="14">
                        <ContentPresenter Name="content" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                      Margin="{TemplateBinding Padding}"
                                      RecognizesAccessKey="True"
                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{Binding Source={StaticResource colorSource}, Path=Instance.MouseOver}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{Binding Source={StaticResource colorSource}, Path=Instance.MousePressed}"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="EditButton" TargetType="Button">
        <Setter Property="Template">
            <Setter.Value>

                <ControlTemplate TargetType="{x:Type Button}">

                    <Border Name="Border" CornerRadius="2" Background="#939589" TextBlock.Foreground="White" TextBlock.FontFamily="Calibri" TextBlock.FontSize="14">

                        <ContentPresenter Name="content" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                      Margin="{TemplateBinding Padding}"
                                      RecognizesAccessKey="True"
                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                      VerticalAlignment="Center"/>

                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="#007edf"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="#0061ac"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="NameLabel" TargetType="Label">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Label}">
                    <Border>
                        <!--="{TemplateBinding HorizontalContentAlignment}"
                               "{TemplateBinding VerticalContentAlignment}"-->
                        <ContentPresenter
                        HorizontalAlignment="Left" 
               VerticalAlignment="Center"
               RecognizesAccessKey="False" />
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled"
                             Value="True">
                            <Setter Property="Foreground" Value="Black" />
                            <Setter Property="FontFamily" Value="Segoe UI"/>
                            <!--<Setter Property="FontFamily" Value="Calibri"/>-->
                            <Setter Property="FontSize" Value="12"/>
                            <!--<Setter Property="FontWeight" Value="Bold"/>-->
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <!--<Setter Property="Foreground" Value="Black"/>
        <Setter Property="FontFamily" Value="Calibri"/>
        <Setter Property="FontSize" Value="12"/>-->
    </Style>

    <!--Check Box style-->
    <Style x:Key="CheckBoxFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle 
            Margin="15,0,0,0"
            StrokeThickness="1"
            Stroke="#60000000"
            StrokeDashArray="2 2"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type CheckBox}" TargetType="CheckBox">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="FocusVisualStyle"    Value="{StaticResource CheckBoxFocusVisual}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CheckBox">
                    <BulletDecorator VerticalAlignment="Center" Background="Transparent">
                        <BulletDecorator.Bullet>
                            <Border x:Name="Border"  
              Width="13" 
              Height="13" 
              CornerRadius="0" 
              Background="White"
              BorderThickness="1"
              BorderBrush="#ADAAAD">
                                <Path 
                Width="7" Height="7" 
                x:Name="CheckMark"
                SnapsToDevicePixels="False" 
                Stroke="{StaticResource GlyphBrush}"
                StrokeThickness="2"
                Data="M 0 0 L 7 7 M 0 7 L 7 0" />
                            </Border>
                        </BulletDecorator.Bullet>
                        <ContentPresenter Margin="4,0,0,0"
            VerticalAlignment="Center"
            HorizontalAlignment="Left"
            RecognizesAccessKey="True"/>
                    </BulletDecorator>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="false">
                            <Setter TargetName="CheckMark" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter TargetName="CheckMark" Property="Data" Value="M 0 7 L 7 0" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Border" Property="BorderBrush" Value="Black" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="#F7F3F7" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="Black" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource DisabledBackgroundBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="#40000000" />
                            <Setter Property="Foreground" Value="#80000000"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Radio Button style-->
    <Style x:Key="RadioButtonFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle 
            Margin="15,0,0,0"
            StrokeThickness="1"
            Stroke="#60000000"
            StrokeDashArray="1 2"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type RadioButton}" TargetType="{x:Type RadioButton}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="FocusVisualStyle"	Value="{StaticResource RadioButtonFocusVisual}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <BulletDecorator VerticalAlignment="Center" Background="Transparent">
                        <BulletDecorator.Bullet>
                            <Grid Width="13" Height="13" >
                                <Ellipse x:Name="Border" Fill="White" StrokeThickness="1" Stroke="#ADAAAD" />
                                <Ellipse x:Name="CheckMark" Margin="4" Fill="Black" />
                            </Grid>
                        </BulletDecorator.Bullet>
                        <ContentPresenter Margin="4,0,0,0" VerticalAlignment="Center" HorizontalAlignment="Left" RecognizesAccessKey="False"/>
                    </BulletDecorator>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="false">
                            <Setter TargetName="CheckMark" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Border" Property="Stroke" Value="#F7F3F7" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="Border" Property="Fill" Value="#F7F3F7" />
                            <Setter TargetName="Border" Property="Stroke" Value="Black" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Border" Property="Fill" Value="{StaticResource DisabledBackgroundBrush}" />
                            <Setter TargetName="Border" Property="Stroke" Value="#40000000" />
                            <Setter Property="Foreground" Value="#80000000"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--TabControl style-->
    <Style  TargetType="{x:Type TabControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabControl}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>
                        <TabPanel
             Grid.Row="0"
             Panel.ZIndex="1"
             Margin="0,0,0,0"
             IsItemsHost="True"
             Background="White" />
                        <Border
             Grid.Row="1"
             BorderBrush="#D6D7D6"
             BorderThickness="1">
                            <ContentPresenter ContentSource="SelectedContent" />
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--TabItem Style-->
    <Style TargetType="{x:Type TabItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Grid>
                        <Border   Name="Border"   Background="White" BorderThickness="1,1,1,0"  BorderBrush="Transparent"  TextBlock.FontFamily="Calibri" TextBlock.FontSize="12" >
                            <ContentPresenter x:Name="ContentSite"
               VerticalAlignment="Center"
               HorizontalAlignment="Center"
               ContentSource="Header" Height="10" Width="Auto"
               Margin="5,5,0,5"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="Border" Property="TextBlock.Foreground" Value="{Binding Source={StaticResource colorSource}, Path=Instance.MousePressed}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="#D6D7D6"/>
                            <Setter TargetName="Border" Property="Margin" Value="0,0,0,-2"/>
                            <Setter TargetName="ContentSite" Property="Margin" Value="5,2,5,2"/>
                        </Trigger>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type TabControl}}, Path=Items.Count}" Value="1">
                            <Setter Property="Visibility" Value="Collapsed"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style TargetType="ContextMenu">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ContextMenu">
                    <Border  Padding="0,3,0,3" BorderBrush="#ADAAAD" BorderThickness="1.25" Background="White" SnapsToDevicePixels="True">
                        <ItemsPresenter />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="CustomContextmenu" TargetType="ContextMenu">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ContextMenu">
                    <Border  Padding="0,3,0,3" BorderBrush="#ADAAAD" BorderThickness="1.25" Background="White" SnapsToDevicePixels="True">
                        <ItemsPresenter />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- TopLevelHeader -->

    <ControlTemplate x:Key="{x:Static MenuItem.TopLevelHeaderTemplateKey}" TargetType="{x:Type MenuItem}">
        <Border Name="Border">
            <Grid>
                <ContentPresenter
		Margin="-10,3,6,3"
		ContentSource="Header"
		RecognizesAccessKey="True" />
                <Popup
		Name="Popup"
		Placement="Bottom"
		IsOpen="{TemplateBinding IsSubmenuOpen}"
		AllowsTransparency="True"
		Focusable="False"
		PopupAnimation="Fade">
                    <Border
		  Name="SubmenuBorder"
		  SnapsToDevicePixels="True"
		  Background="#FFFFFF"
		  BorderBrush="#888888"
		  BorderThickness="1">
                        <StackPanel
			IsItemsHost="True"
			KeyboardNavigation.DirectionalNavigation="Cycle" />
                    </Border>
                </Popup>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                <Setter TargetName="Popup" Property="PopupAnimation" Value="None" />
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter TargetName="Border" Property="Background" Value="{StaticResource HighlightedBrush}" />
                <Setter TargetName="Border" Property="BorderBrush" Value="Transparent" />
            </Trigger>
            <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="True">
                <Setter TargetName="SubmenuBorder" Property="Padding" Value="0,3,0,3" />
                <Setter TargetName="SubmenuBorder" Property="BorderBrush" Value="{StaticResource CBorderBrush}" />
                <Setter TargetName="SubmenuBorder" Property="BorderThickness" Value="1.25" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- TopLevelItem -->

    <ControlTemplate x:Key="{x:Static MenuItem.TopLevelItemTemplateKey}" TargetType="{x:Type MenuItem}">
        <Border Name="Border">
            <Grid>
                <ContentPresenter
		Margin="6,3,6,3"
		ContentSource="Header"
		RecognizesAccessKey="True" />
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter TargetName="Border" Property="Background" Value="{StaticResource HighlightedBrush}" />
                <Setter TargetName="Border" Property="BorderBrush" Value="Transparent" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="{x:Static MenuItem.SubmenuItemTemplateKey}" TargetType="{x:Type MenuItem}">
        <Border Name="Border" Padding="0,3,0,3">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Icon" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut" />
                    <ColumnDefinition Width="13" />
                </Grid.ColumnDefinitions>
                <ContentPresenter Name="Icon" Margin="6,0,6,0" VerticalAlignment="Center" ContentSource="Icon" />
                <Border Name="Check" Width="13" Height="13" Visibility="Collapsed" Background="{StaticResource NormalBrush}"
					BorderThickness="1" BorderBrush="{StaticResource NormalBorderBrush}">
                    <Path Name="CheckMark" Width="7" Height="7" Visibility="Hidden" SnapsToDevicePixels="False" Stroke="{StaticResource GlyphBrush}"
						StrokeThickness="2" Data="M 0 0 L 7 7 M 0 7 L 7 0" />
                </Border>
                <ContentPresenter Name="HeaderHost" Grid.Column="1" ContentSource="Header" RecognizesAccessKey="True" />
                <TextBlock x:Name="InputGestureText" Grid.Column="2" Text="{TemplateBinding InputGestureText}"  Margin="2,0,2,0" DockPanel.Dock="Right" />
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter TargetName="Icon" Property="Visibility" Value="Hidden" />
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="IsCheckable" Value="true">
                <Setter TargetName="Check" Property="Visibility" Value="Visible" />
                <Setter TargetName="Icon" Property="Visibility" Value="Hidden" />
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter TargetName="Border" Property="Background" Value="{StaticResource HighlightedBrush}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="{x:Static MenuItem.SubmenuHeaderTemplateKey}" TargetType="MenuItem">
        <Border Name="Border" Padding="0,3,0,3">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Icon" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut" />
                    <ColumnDefinition Width="10" />
                </Grid.ColumnDefinitions>
                <ContentPresenter Name="Icon" VerticalAlignment="Center" ContentSource="Icon" />
                <ContentPresenter Name="HeaderHost" Grid.Column="1" ContentSource="Header" RecognizesAccessKey="True" />
                <TextBlock x:Name="InputGestureText" Grid.Column="2" Text="{TemplateBinding InputGestureText}" Margin="2,0,2,0" DockPanel.Dock="Right" />
                <Path Grid.Column="3" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M 0 0 L 0 7 L 4 3.5 Z" Fill="{StaticResource GlyphBrush}" />
                <Popup Name="Popup" Placement="Right" IsOpen="{TemplateBinding IsSubmenuOpen}" AllowsTransparency="True" Focusable="False" PopupAnimation="Slide">
                    <Border Name="SubmenuBorder" SnapsToDevicePixels="True" Background="{StaticResource WindowBackgroundBrush}">
                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
                    </Border>
                </Popup>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter TargetName="Icon" Property="Visibility" Value="Hidden" />
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter TargetName="Border" Property="Background" Value="{StaticResource HighlightedBrush}" />
                <!---->
			</Trigger>
			<Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="True">
				<Setter TargetName="SubmenuBorder" Property="Padding" Value="0,3,0,3" />
				<Setter TargetName="SubmenuBorder" Property="BorderBrush" Value="{StaticResource CBorderBrush}" />
				<Setter TargetName="SubmenuBorder" Property="BorderThickness" Value="1.25" />
			</Trigger>
			<Trigger Property="IsEnabled" Value="false">
				<Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<Style x:Key="Menuitem" TargetType="MenuItem">
					<Setter Property="OverridesDefaultStyle" Value="True" />
					<Style.Triggers>
						<Trigger Property="Role" Value="SubmenuHeader">
							<Setter Property="Template" Value="{StaticResource {x:Static MenuItem.SubmenuHeaderTemplateKey}}" />
						</Trigger>
						<Trigger Property="Role" Value="SubmenuItem">
							<Setter Property="Template" Value="{StaticResource {x:Static MenuItem.SubmenuItemTemplateKey}}" />
						</Trigger>
						<Trigger Property="Role" Value="TopLevelHeader">
							<Setter Property="Template" Value="{StaticResource {x:Static MenuItem.TopLevelHeaderTemplateKey}}" />
							<Setter Property="Grid.IsSharedSizeScope" Value="true" />
						</Trigger>
						<Trigger Property="Role" Value="TopLevelItem">
							<Setter Property="Template" Value="{StaticResource {x:Static MenuItem.TopLevelItemTemplateKey}}" />
						</Trigger>
					</Style.Triggers>
				</Style>

    <!-- ColumnHeaderGripperStyle styled to set manualy the column header width-->
    <!--<Style x:Key="ColumnHeaderGripperStyle" TargetType="{x:Type Thumb}">
                    <Setter Property="Width" Value="5" />
                    <Setter Property="Background" Value="Transparent" />
                    <Setter Property="Cursor" Value="SizeWE" />
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type Thumb}">
                                <Border Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>-->


    <Style TargetType="{x:Type Label}">
        <Setter Property="Foreground" Value="Black"/>
        <!--<Setter Property="FontFamily" Value="Calibri"/>-->
        <Setter Property="FontFamily" Value="Segoe UI"/>
        <Setter Property="FontSize" Value="12"/>
        <!--<Setter Property="FontWeight" Value="Bold"/>-->
    </Style>
    <!--<Style.Triggers>
                        <Trigger Property="Visibility" Value="Visible">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="Opacity"
                             From="0.0" To="1.0" Duration="0:0:1"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                        </Trigger>
                    </Style.Triggers>-->

    <Style x:Key="CloseButton"  TargetType="Button">
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Image x:Name="Close" Source="/StatTickerFive;component/Images/Custom Close.png" Height="10" Width="10">
                    </Image>
                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Button}}, Path=IsMouseOver}" Value="True">
                            <Setter TargetName="Close" Property="Source" Value="/StatTickerFive;component/Images/Custom Close selected.png" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Button}}, Path=IsPressed}" Value="True">
                            <Setter TargetName="Close" Property="Source" Value="/StatTickerFive;component/Images/Custom Close selected.png" />
                        </DataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">

                    <Border Name="Border" Background="Transparent">
                        <ContentPresenter Name="content" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                      Margin="{TemplateBinding Padding}"
                                      RecognizesAccessKey="True"
                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <ContentPresenter.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform ScaleX="1" ScaleY="1" />
                                    <SkewTransform AngleX="0" AngleY="0" />
                                    <RotateTransform Angle="0" />
                                    <TranslateTransform X="0" Y="0" />
                                </TransformGroup>
                            </ContentPresenter.RenderTransform>
                        </ContentPresenter>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="#d6ebff" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="#94c3e7" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="AdminCloseButton"  TargetType="Button">
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Image x:Name="Close" Source="/StatTickerFive;component/Images/Custom Close.png" Height="10" Width="10">
                    </Image>
                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Button}}, Path=IsMouseOver}" Value="True">
                            <Setter TargetName="Close" Property="Source" Value="/StatTickerFive;component/Images/Custom Close selected.png" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Button}}, Path=IsPressed}" Value="True">
                            <Setter TargetName="Close" Property="Source" Value="/StatTickerFive;component/Images/Custom Close selected.png" />
                        </DataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">

                    <Border Name="Border" Background="Transparent" CornerRadius="2">
                        <ContentPresenter Name="content" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                      Margin="{TemplateBinding Padding}"
                                      RecognizesAccessKey="True"
                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <ContentPresenter.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform ScaleX="1" ScaleY="1" />
                                    <SkewTransform AngleX="0" AngleY="0" />
                                    <RotateTransform Angle="0" />
                                    <TranslateTransform X="0" Y="0" />
                                </TransformGroup>
                            </ContentPresenter.RenderTransform>
                        </ContentPresenter>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="#d6ebff" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="#94c3e7" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Datagrid stylling start-->
    <Style TargetType="{x:Type DataGrid}" x:Key="CustomGrid">
        <!--<Setter Property="Background" Value="White" />-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGrid}">
                    <Border Background="{TemplateBinding Background}"
	  BorderBrush="{TemplateBinding BorderBrush}"
	  BorderThickness="{TemplateBinding BorderThickness}"
	  SnapsToDevicePixels="True"
	  Padding="{TemplateBinding Padding}">
                        <ScrollViewer   Focusable="false"
				Name="DG_ScrollViewer">
                            <ScrollViewer.Template>
                                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                                    <Grid>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto" />
                                            <RowDefinition Height="*" />
                                            <RowDefinition Height="Auto" />
                                        </Grid.RowDefinitions>

                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto" />
                                            <ColumnDefinition Width="*" />
                                            <ColumnDefinition Width="Auto" />
                                        </Grid.ColumnDefinitions>

                                        <Button Command="{x:Static DataGrid.SelectAllCommand}"
								Width="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}, Path=CellsPanelHorizontalOffset}"
								Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type DataGrid}, ResourceId=DataGridSelectAllButtonStyle}}"
								Focusable="false"
                                
								Visibility="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}, Path=HeadersVisibility, Converter={x:Static DataGrid.HeadersVisibilityConverter}, ConverterParameter={x:Static DataGridHeadersVisibility.All}}" />
                                        <DataGridColumnHeadersPresenter Grid.Column="1"
										   Name="PART_ColumnHeadersPresenter"
										   Visibility="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}, Path=HeadersVisibility, Converter={x:Static DataGrid.HeadersVisibilityConverter}, ConverterParameter={x:Static DataGridHeadersVisibility.Column}}" />

                                        <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" Grid.Row="1" Grid.ColumnSpan="2" CanContentScroll="{TemplateBinding CanContentScroll}" />

                                        <ScrollBar Grid.Row="1" Grid.Column="1" Name="PART_VerticalScrollBar"
								 Orientation="Vertical" HorizontalAlignment="Right" Margin="0,0,0,0" SnapsToDevicePixels="True" OverridesDefaultStyle="True"
								 Maximum="{TemplateBinding ScrollableHeight}"
								 ViewportSize="{TemplateBinding ViewportHeight}"
								 Value="{Binding Path=VerticalOffset, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
								 Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}">
                                            <ScrollBar.Style>
                                                <Style TargetType="{x:Type ScrollBar}">
                                                    <Setter Property="SnapsToDevicePixels" Value="True" />
                                                    <Setter Property="OverridesDefaultStyle" Value="true" />
                                                    <Style.Triggers>
                                                        <Trigger Property="Orientation" Value="Vertical">
                                                            <Setter Property="Width" Value="18" />
                                                            <Setter Property="Height" Value="Auto" />
                                                            <Setter Property="Template" Value="{StaticResource VerticalScrollBar}" />
                                                        </Trigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </ScrollBar.Style>
                                        </ScrollBar>

                                        <Grid Grid.Row="2" Grid.Column="1">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}, Path=NonFrozenColumnsViewportHorizontalOffset}" />
                                                <ColumnDefinition Width="*" />
                                            </Grid.ColumnDefinitions>
                                            <ScrollBar Grid.Column="1"
									   Name="PART_HorizontalScrollBar"
									   Orientation="Horizontal"
									   Maximum="{TemplateBinding ScrollableWidth}"
									   ViewportSize="{TemplateBinding ViewportWidth}"
									   Value="{Binding Path=HorizontalOffset, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
									   Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}">
                                                <ScrollBar.Style>
                                                    <Style TargetType="{x:Type ScrollBar}">
                                                        <Setter Property="SnapsToDevicePixels" Value="True" />
                                                        <Setter Property="OverridesDefaultStyle" Value="true" />
                                                        <Style.Triggers>
                                                            <Trigger Property="Orientation" Value="Horizontal">
                                                                <Setter Property="Width" Value="Auto" />
                                                                <Setter Property="Height" Value="18" />
                                                                <Setter Property="Template" Value="{StaticResource HorizontalScrollBar}" />
                                                            </Trigger>
                                                        </Style.Triggers>
                                                    </Style>
                                                </ScrollBar.Style>
                                            </ScrollBar>
                                        </Grid>
                                    </Grid>
                                </ControlTemplate>
                            </ScrollViewer.Template>
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type DataGridCell}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridCell}">
                    <Grid>
                        <ContentPresenter VerticalAlignment="Center" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{x:Null}" />
                <Setter Property="BorderBrush" Value="{x:Null}" />
                <Setter Property="Foreground" Value="Black" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- ColumnHeaderGripperStyle styled to set manualy the column header width-->
    <Style x:Key="ColumnHeaderGripperStyle" TargetType="{x:Type Thumb}">
        <Setter Property="Width" Value="5" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Cursor" Value="SizeWE" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- DataGridColumnHeadersPresenter styled to remove the DataGridColumnHeader that spans the entire grid -->
    <Style x:Key="{x:Type DataGridColumnHeadersPresenter}" TargetType="{x:Type DataGridColumnHeadersPresenter}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridColumnHeadersPresenter}">
                    <Grid>
                        <ItemsPresenter />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- column headers styled to create a rounded tab effect and to add sort arrows -->
    <Style TargetType="{x:Type DataGridColumnHeader}">
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="Foreground" Value="Black" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="FontFamily" Value="Calibri" />
        <Setter Property="Height" Value="25"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridColumnHeader}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="HoverOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="MainBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0.6" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HoverOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="MainBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid>
                        <Border Name="MainBorder" BorderThickness="0,1,1,1" Margin="0,0,0,0" BorderBrush="#D6D7D6" Background="White">
                            <Grid>
                                <!-- an overlayer glass effect -->
                                <!--<Border VerticalAlignment="Top" Name="GradientBorder" Height="10" CornerRadius="7,7,0,0"  BorderBrush="#D99466" Background="{StaticResource GlassBrush}" />-->
                                <ContentPresenter Margin="3" HorizontalAlignment="Center" VerticalAlignment="Center" Content="{TemplateBinding Content}"
													  ContentStringFormat="{TemplateBinding ContentStringFormat}" ContentTemplate="{TemplateBinding ContentTemplate}" />
                            </Grid>
                        </Border>
                        <Path Name="UpArrow" Fill="Black" HorizontalAlignment="Right"
								  VerticalAlignment="Center" Margin="0,2,1,0" Visibility="Hidden">
                            <Path.Data>
                                <PathGeometry>
                                    <PathFigure StartPoint="0,0">
                                        <LineSegment Point="7,0" />
                                        <LineSegment Point="3.5,6" />
                                        <LineSegment Point="0,0" />
                                    </PathFigure>
                                </PathGeometry>
                            </Path.Data>
                        </Path>
                        <Path Name="DownArrow" Fill="Black" HorizontalAlignment="Right"
								  VerticalAlignment="Center" Margin="0,2,1,0" Visibility="Hidden">
                            <Path.Data>
                                <PathGeometry>
                                    <PathFigure StartPoint="0,6">
                                        <LineSegment Point="7,6" />
                                        <LineSegment Point="3.5,0" />
                                        <LineSegment Point="0,6" />
                                    </PathFigure>
                                </PathGeometry>
                            </Path.Data>
                        </Path>
                        <Thumb x:Name="PART_LeftHeaderGripper" Grid.Column="0" HorizontalAlignment="Left" Style="{StaticResource ColumnHeaderGripperStyle}" />
                        <Thumb x:Name="PART_RightHeaderGripper" Grid.Column="3" HorizontalAlignment="Right" Style="{StaticResource ColumnHeaderGripperStyle}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="SortDirection" Value="Descending">
                            <Setter TargetName="UpArrow" Property="Visibility" Value="Hidden" />
                            <Setter TargetName="DownArrow" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="SortDirection" Value="Ascending">
                            <Setter TargetName="DownArrow" Property="Visibility" Value="Hidden" />
                            <Setter TargetName="UpArrow" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Cursor" Value="Hand" />
                            <Setter TargetName="MainBorder" Property="Background" Value="White" />
                            <Setter TargetName="MainBorder" Property="BorderBrush" Value="Black" />
                            <Setter Property="Foreground" Value="#0071C6" />
                            <!--<Trigger.EnterActions>
											<BeginStoryboard Storyboard="{StaticResource HoverOn}" />
										</Trigger.EnterActions>
										<Trigger.ExitActions>
											<BeginStoryboard Storyboard="{StaticResource HoverOff}" />
										</Trigger.ExitActions>-->
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Row header-->
    <Style TargetType="{x:Type DataGridRowHeader}">
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridRowHeader}">
                    <Grid>
                        <Border Name="MainBorder" BorderThickness="0.5" BorderBrush="#D6D7D6" Background="{StaticResource NormalBrush}">
                            <Grid>
                                <!-- an overlayer glass effect -->
                                <!--<Border VerticalAlignment="Top" Name="GradientBorder" Height="10" CornerRadius="2,2,2,2"  BorderBrush="#D99466" Background="{StaticResource GlassBrush}" />-->
                                <ContentPresenter Margin="3" HorizontalAlignment="Center" VerticalAlignment="Center" Content="{TemplateBinding Content}" Height="15" 
													  ContentStringFormat="{TemplateBinding ContentStringFormat}" ContentTemplate="{TemplateBinding ContentTemplate}" />
                            </Grid>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CustomCheckBox" TargetType="CheckBox">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="FocusVisualStyle"  Value="{StaticResource CheckBoxFocusVisual}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CheckBox">
                    <BulletDecorator VerticalAlignment="Center" Background="Transparent">
                        <BulletDecorator.Bullet>
                            <Border x:Name="Border"  
              Width="13" 
              Height="13" 
              CornerRadius="0" 
              Background="White"
              BorderThickness="1"
              BorderBrush="#ADAAAD">
                                <Path 
                Width="7" Height="7" 
                x:Name="CheckMark"
                SnapsToDevicePixels="False" 
                Stroke="{StaticResource GlyphBrush}"
                StrokeThickness="2"
                Data="M 0 0 L 7 7 M 0 7 L 7 0" />
                            </Border>
                        </BulletDecorator.Bullet>
                        <ContentPresenter Margin="4,0,0,0"
            VerticalAlignment="Center"
            HorizontalAlignment="Left"
            RecognizesAccessKey="False"/>
                    </BulletDecorator>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="false">
                            <Setter TargetName="CheckMark" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter TargetName="CheckMark" Property="Data" Value="M 0 7 L 7 0" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Border" Property="BorderBrush" Value="Black" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="#F7F3F7" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="Black" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource DisabledBackgroundBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="#40000000" />
                            <Setter Property="Foreground" Value="#80000000"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Color x:Key="WindowColor">#FFE8EDF9</Color>
    <Color x:Key="ContentAreaColorLight">#FFC5CBF9</Color>
    <Color x:Key="ContentAreaColorDark">#FF7381F9</Color>

    <Color x:Key="DisabledControlLightColor">#FFE8EDF9</Color>
    <Color x:Key="DisabledControlDarkColor">#FFC5CBF9</Color>
    <Color x:Key="DisabledForegroundColor">#FF888888</Color>

    <Color x:Key="SelectedBackgroundColor">#FFC5CBF9</Color>
    <Color x:Key="SelectedUnfocusedColor">#FFDDDDDD</Color>

    <Color x:Key="ControlLightColor">White</Color>
    <Color x:Key="ControlMediumColor">#FF7381F9</Color>
    <Color x:Key="ControlDarkColor">#FF211AA9</Color>

    <Color x:Key="ControlMouseOverColor">#FF3843C4</Color>
    <Color x:Key="ControlPressedColor">#FF211AA9</Color>


    <Color x:Key="GlyphColor">#FF444444</Color>
    <Color x:Key="GlyphMouseOver">sc#1, 0.004391443, 0.002428215, 0.242281124</Color>

    <!--Border colors-->
    <Color x:Key="BorderLightColor">#FFCCCCCC</Color>
    <Color x:Key="BorderMediumColor">#FF888888</Color>
    <Color x:Key="BorderDarkColor">#FF444444</Color>

    <Color x:Key="PressedBorderLightColor">#FF888888</Color>
    <Color x:Key="PressedBorderDarkColor">#FF444444</Color>

    <Color x:Key="DisabledBorderLightColor">#FFAAAAAA</Color>
    <Color x:Key="DisabledBorderDarkColor">#FF888888</Color>

    <Color x:Key="DefaultBorderBrushDarkColor">Black</Color>

    <!--Control-specific resources.-->
    <Color x:Key="HeaderTopColor">#FFC5CBF9</Color>
    <Color x:Key="DatagridCurrentCellBorderColor">Black</Color>
    <Color x:Key="SliderTrackDarkColor">#FFC5CBF9</Color>
    

    <Color x:Key="NavButtonFrameColor">#FF3843C4</Color>

    <LinearGradientBrush x:Key="MenuPopupBrush"
                     EndPoint="0.5,1"
                     StartPoint="0.5,0">
        <GradientStop Color="{DynamicResource ControlLightColor}"
                Offset="0" />
        <GradientStop Color="{DynamicResource ControlMediumColor}"
                Offset="0.5" />
        <GradientStop Color="{DynamicResource ControlLightColor}"
                Offset="1" />
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="ProgressBarIndicatorAnimatedFill"
                     StartPoint="0,0"
                     EndPoint="1,0">
        <LinearGradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#000000FF"
                    Offset="0" />
                <GradientStop Color="#600000FF"
                    Offset="0.4" />
                <GradientStop Color="#600000FF"
                    Offset="0.6" />
                <GradientStop Color="#000000FF"
                    Offset="1" />
            </GradientStopCollection>
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <Style TargetType="ScrollBar">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="Width" Value="18" />
                <Setter Property="Height" Value="Auto" />
                <Setter Property="Template" Value="{StaticResource VerticalScrollBar}" />
            </Trigger>
            <Trigger Property="Orientation" Value="Horizontal">
                <Setter Property="Width" Value="Auto" />
                <Setter Property="Height" Value="18" />
                <Setter Property="Template" Value="{StaticResource HorizontalScrollBar}" />
            </Trigger>
        </Style.Triggers>
    </Style>


    <SolidColorBrush x:Key="ButtonHover" Color="#C2E0FF" />
    <SolidColorBrush x:Key="ButtonHoverBorder" Color="#3399FF" />
    <SolidColorBrush x:Key="ButtonChecked" Color="#E6F0FA" />
    <SolidColorBrush x:Key="ButtonPressed" Color="#99CCFF" />
    <SolidColorBrush x:Key="ButtonPressedBorder" Color="#3399FF" />

    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
    <local:InverseBoolConverter x:Key="InverseBoolConverter" />
    <local:ColorToSolidColorBrushConverter x:Key="ColorToSolidColorBrushConverter" />

    <LinearGradientBrush x:Key="ColorPickerDarkBorderBrush" EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="#FFA3AEB9" Offset="0" />
        <GradientStop Color="#FF8399A9" Offset="0.375" />
        <GradientStop Color="#FF718597" Offset="0.375" />
        <GradientStop Color="#FF617584" Offset="1" />
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="PopupBackgroundBrush" StartPoint="0,0" EndPoint="0,1">
        <LinearGradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Offset="0" Color="#FFffffff" />
                <GradientStop Offset="1" Color="#FFE8EBED" />
            </GradientStopCollection>
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <Style x:Key="ColorItemContainerStyle" TargetType="{x:Type ListBoxItem}">
        <Setter Property="ToolTip" Value="{Binding Name}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Grid ToolTip="{Binding Name}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                        <Border BorderThickness="1" Background="Transparent" BorderBrush="Transparent" x:Name="_outerBorder" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                            <Border Background="Transparent" BorderThickness="1" BorderBrush="Transparent" x:Name="_innerBorder" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="_outerBorder" Property="BorderBrush" Value="#FFFF0000" />
                            <Setter TargetName="_innerBorder" Property="BorderBrush" Value="#FFFFFF00" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="_outerBorder" Property="BorderBrush" Value="#FFFF0000" />
                            <Setter TargetName="_innerBorder" Property="BorderBrush" Value="#FFFFFF00" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <DataTemplate x:Key="ColorItemTemplate">
        <Grid>
            <Border Background="{StaticResource CheckerBrush}" BorderBrush="Black" BorderThickness="1" Margin="2,2,2,2" >
                <Rectangle Width="14" Height="14">
                    <Rectangle.Style>
                        <Style TargetType="Rectangle">
                            <Setter Property="Fill" Value="{Binding Color, Converter={StaticResource ColorToSolidColorBrushConverter}}" />
                        </Style>
                    </Rectangle.Style>
                </Rectangle>
            </Border>
        </Grid>
    </DataTemplate>

    <Style x:Key="ColorPickerToggleButtonStyle" TargetType="ToggleButton">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition />
                            <ColumnDefinition Width="20" />
                        </Grid.ColumnDefinitions>
                        <Border
      x:Name="Border" 
      Grid.ColumnSpan="2"
      Background="White"
      BorderBrush="#ADAAAD"
      BorderThickness="1" />
                        <Border 
      Grid.Column="0"
      Margin="1" 
      Background="Transparent"
      BorderThickness="0,0,0,0" />
                        <Path 
      x:Name="Arrow"
      Grid.Column="1"     
      Fill="#737573"
      HorizontalAlignment="Center"
      VerticalAlignment="Center"
      Data="M 0 0 L 4 4 L 8 0 Z"/>
                                    <ContentPresenter Content="{TemplateBinding Content}"
                                          ContentTemplate="{TemplateBinding ContentTemplate}"
                                          ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" />
                                </Grid>
                                <ControlTemplate.Triggers>

                        <Trigger Property="ToggleButton.IsMouseOver" Value="true">
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="true">
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">

                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ColorDisplayStyle" TargetType="ContentControl">
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Border Background="{StaticResource CheckerBrush}">
                        <Rectangle Fill="{Binding SelectedColor, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=tk:ColorPicker}, Converter={StaticResource ColorToSolidColorBrushConverter}}" />
                    </Border>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ColorListStyle" TargetType="ListBox">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <WrapPanel Width="200" />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemContainerStyle" Value="{StaticResource ColorItemContainerStyle}" />
        <Setter Property="ItemTemplate" Value="{StaticResource ColorItemTemplate}" />
        <Setter Property="SelectionMode" Value="Single" />
    </Style>

    <Style TargetType="{x:Type tk:ColorPicker}">
        <Setter Property="Background" Value="White" />
        <Setter Property="BorderBrush" Value="{StaticResource ColorPickerDarkBorderBrush}" />
        <Setter Property="BorderThickness" Value="1,1,1,1" />
        <Setter Property="ButtonStyle" Value="{StaticResource ColorPickerToggleButtonStyle}" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="DisplayColorAndName" Value="True"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type tk:ColorPicker}">
                    <Grid>
                        <ToggleButton x:Name="PART_ColorPickerToggleButton"
                                IsTabStop="True"
                                MinHeight="22" 
                                Background="{TemplateBinding Background}" 
                                BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="{TemplateBinding BorderThickness}" 
                                VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                Padding="{TemplateBinding Padding}"
                                IsChecked="{Binding IsOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
                                IsHitTestVisible="{Binding IsOpen, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource InverseBoolConverter}}"
                                Style="{TemplateBinding ButtonStyle}">
                            <Grid Margin="2">
                                <ContentControl x:Name="ColorOnly" Style="{StaticResource ColorDisplayStyle}" />

                                <Border x:Name="ColorAndName" Background="White" Visibility="Hidden">
                                    <StackPanel Orientation="Horizontal">
                                        <ContentControl HorizontalAlignment="Left" Width="30" Margin="2,1,4,1" Style="{StaticResource ColorDisplayStyle}" BorderThickness="1" BorderBrush="#FFC9CACA" />
                                        <TextBlock Text="{Binding SelectedColorText, RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="Center" />
                                    </StackPanel>
                                </Border>
                            </Grid>
                        </ToggleButton>

                        <Popup x:Name="PART_ColorPickerPalettePopup" VerticalAlignment="Bottom" IsOpen="{Binding ElementName=PART_ColorPickerToggleButton, Path=IsChecked}" StaysOpen="False" AllowsTransparency="True" Focusable="False" HorizontalOffset="1" VerticalOffset="1" PopupAnimation="Slide">
                                        <Border BorderThickness="1" Background="{Binding Source={StaticResource colorSource}, Path=Instance.TitleBackcolor}" BorderBrush="{StaticResource ColorPickerDarkBorderBrush}" Padding="3">
                                <Grid>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition />
                                        <RowDefinition Height="Auto" />
                                    </Grid.RowDefinitions>

                                    <Grid x:Name="_gridStandardColorsHost" Margin="4">
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto" />
                                            <RowDefinition Height="Auto" />
                                            <RowDefinition Height="Auto" />
                                            <RowDefinition Height="Auto" />
                                        </Grid.RowDefinitions>

                                        <!-- Available Colors -->
                                        <Grid Grid.Row="1" Visibility="{TemplateBinding ShowAvailableColors, Converter={StaticResource BooleanToVisibilityConverter}}">
                                            <Grid>
                                                <Grid.RowDefinitions>
                                                    <RowDefinition Height="Auto" />
                                                    <RowDefinition />
                                                </Grid.RowDefinitions>
                                                            <TextBlock Text="{TemplateBinding AvailableColorsHeader}" Foreground="{Binding Source={StaticResource colorSource}, Path=Instance.Forecolor}" Background="{Binding Source={StaticResource colorSource}, Path=Instance.TitleBackcolor}" Padding="2" Margin="0,0,0,1" />
                                                <ListBox x:Name="PART_AvailableColors"
                                             Grid.Row="1"
                                             ItemsSource="{Binding AvailableColors, RelativeSource={RelativeSource TemplatedParent}}"
                                             Style="{StaticResource ColorListStyle}" />
                                            </Grid>
                                        </Grid>

                                        <!-- Standard Colors-->
                                        <Grid Grid.Row="2" Visibility="{TemplateBinding ShowStandardColors, Converter={StaticResource BooleanToVisibilityConverter}}">
                                            <Grid>
                                                <Grid.RowDefinitions>
                                                    <RowDefinition Height="Auto" />
                                                    <RowDefinition Height="Auto" />
                                                </Grid.RowDefinitions>
                                                            <TextBlock Text="{TemplateBinding StandardColorsHeader}" Foreground="{Binding Source={StaticResource colorSource}, Path=Instance.Forecolor}" Background="{Binding Source={StaticResource colorSource}, Path=Instance.TitleBackcolor}" Padding="2" Margin="0,1,0,1" />
                                                <ListBox x:Name="PART_StandardColors"
                                             Grid.Row="1"
                                             ItemsSource="{Binding StandardColors, RelativeSource={RelativeSource TemplatedParent}}"                                                      
                                             Style="{StaticResource ColorListStyle}" />
                                            </Grid>
                                        </Grid>

                                        <!-- Recent Colors-->
                                        <Grid Grid.Row="3" Margin="0,1,0,1" Visibility="{TemplateBinding ShowRecentColors, Converter={StaticResource BooleanToVisibilityConverter}}">
                                            <Grid>
                                                <Grid.RowDefinitions>
                                                    <RowDefinition Height="Auto" />
                                                    <RowDefinition Height="Auto" />
                                                </Grid.RowDefinitions>
                                                            <TextBlock Text="{TemplateBinding RecentColorsHeader}" Foreground="{Binding Source={StaticResource colorSource}, Path=Instance.Forecolor}" Background="{Binding Source={StaticResource colorSource}, Path=Instance.TitleBackcolor}" Padding="2" Margin="0,1,0,1" />
                                                <ListBox x:Name="PART_RecentColors"
                                             Grid.Row="1"
                                             ItemsSource="{Binding RecentColors, RelativeSource={RelativeSource TemplatedParent}}"
                                             Style="{StaticResource ColorListStyle}" />
                                            </Grid>
                                        </Grid>
                                    </Grid>

                                    <!-- ColorCanvas -->
                                    <Grid x:Name="_colorCanvasHost" Visibility="Collapsed">
                                        <tk:ColorCanvas x:Name="PART_ColorCanvas"
                                                 Background="Transparent"
                                                 BorderThickness="0"
                                                 
                                                 UsingAlphaChannel="{Binding UsingAlphaChannel, RelativeSource={RelativeSource TemplatedParent}}"
                                                 SelectedColor="{Binding SelectedColor, RelativeSource={RelativeSource TemplatedParent}}" />
                                    </Grid>

                                    <Separator Grid.Row="1" HorizontalAlignment="Stretch" Margin="5,0,5,0" />

                                    <!-- More Colors Button -->

                                    <ToggleButton x:Name="_colorMode" Content="Advanced" Grid.Row="2" Margin="5" Visibility="{TemplateBinding ShowAdvancedButton, Converter={StaticResource BooleanToVisibilityConverter}}">
                                      
                                    </ToggleButton>
                                </Grid>
                            </Border>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="DisplayColorAndName" Value="True">
                            <Setter TargetName="ColorOnly" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="ColorAndName" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger SourceName="_colorMode" Property="IsChecked" Value="True">
                            <Setter TargetName="_colorMode" Property="Content" Value="Standard" />
                            <Setter TargetName="_colorCanvasHost" Property="Visibility" Value="Visible" />
                            <Setter TargetName="_gridStandardColorsHost" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="ToggleButton">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Name="Border" CornerRadius="2" Background="#939589" TextBlock.Foreground="White" TextBlock.FontFamily="Calibri" TextBlock.FontSize="14">
                        <ContentPresenter Name="content" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                      Margin="{TemplateBinding Padding}"
                                      RecognizesAccessKey="True"
                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{Binding Source={StaticResource colorSource}, Path=Instance.MouseOver}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{Binding Source={StaticResource colorSource}, Path=Instance.MousePressed}"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SideButton"  TargetType="ToggleButton">
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="ToggleButton">
                                <Border x:Name="Border" CornerRadius="2" BorderThickness="1"  Background="#939589" 
                                                                BorderBrush="{StaticResource NormalBorderBrush}">
                                    <ContentPresenter Margin="2" HorizontalAlignment="Center" VerticalAlignment="Center"
                                                                 RecognizesAccessKey="True"/>
                                </Border>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsMouseOver" Value="true">
                                        <Setter TargetName="Border" Property="Background" Value="#1398ff" />
                                        <Setter Property="Cursor" Value="Hand" />
                                    </Trigger>
                                    <Trigger Property="IsPressed" Value="true">
                                        <Setter TargetName="Border" Property="Background" Value="#0061ac" />
                                    </Trigger>
                                    <Trigger Property="IsChecked" Value="true">
                                        <Setter TargetName="Border" Property="Background" Value="#007edf"/>
                                    </Trigger>
                                    <MultiTrigger>
                                        <MultiTrigger.Conditions>
                                            <Condition Property="IsChecked" Value="false"/>
                                            <Condition Property="IsMouseOver" Value="false"/>
                                        </MultiTrigger.Conditions>
                                        <Setter TargetName="Border" Property="Background" Value="#939589"/>
                                    </MultiTrigger>

                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>

                <!-- 
         This color will be used to draw a border around the TabControl, on 
         the bottom of the TabPanel and on the bottom of unselected TabItems.
         -->
                <Color x:Key="BorderColor_Base">#888</Color>

                <!-- 
         This color will be used to draw the (outer) background of TabPages and
         the selected TabItem.
      -->
                <Color x:Key="TabControl_BackgroundColor_Base">#EEF7FF</Color>

                <!-- Brushes used for styling the TabControl -->
                <SolidColorBrush x:Key="TabControl_BackgroundBrush_Base" 
                       Color="{StaticResource TabControl_BackgroundColor_Base}"/>

                <!-- Brushes for drawing the outer and inner borders on TabPages -->
                <SolidColorBrush x:Key="TabPage_InnerBorderBrushDark" 
                       Color="#FF8DB2E3"/>
                <LinearGradientBrush x:Key="TabPage_InnerBorderBrushBright" 
                           StartPoint="0,0" EndPoint="1,1">
                    <LinearGradientBrush.GradientStops>
                        <GradientStop Offset="0" Color="Transparent"/>
                        <GradientStop Offset="1" Color="#FFC0F9FF"/>
                    </LinearGradientBrush.GradientStops>
                </LinearGradientBrush>

                <!-- 
         We only want to render a line between the TabControl's TabPage-area and
         the TabItemsPanel where there is no TabItem/TabStrip. However, we cannot
         simply set the TabPanel's Background-property as this would affect
         the area as a whole.
         The trick here is to define a gradient that only renders a 1px line at
         the bottom. Since TabItems are rendered above the background, this line
         will only be visible in the area that doesn't contain a TabItem.
         We'll achieve this effect by using a gradient that finishes with the
         border-color, but only for the last .01%.
      -->
                <!--<Color x:Key="TabPanel_BackgroundColor_Base">#ABCABC</Color>-->
                <Color x:Key="TabPanel_BackgroundColor_Base">Transparent</Color>
                <LinearGradientBrush x:Key="TabPanel_BackgroundBrush" 
                           StartPoint="0,0" EndPoint="0,1">
                    <LinearGradientBrush.GradientStops>
                        <!--<GradientStop Offset="0.98" Color="Transparent"/>-->
                        <GradientStop Offset="0.98" Color="{StaticResource TabPanel_BackgroundColor_Base}"/>
                        <GradientStop Offset="0.99" 
               Color="{StaticResource BorderColor_Base}"/>
                    </LinearGradientBrush.GradientStops>
                </LinearGradientBrush>

                <!-- Brushes used for styling TabItems (Background) -->
                <LinearGradientBrush x:Key="TabItem_BackgroundBrush_Disabled" 
                           StartPoint="0,0" EndPoint="0,1">
                    <LinearGradientBrush.GradientStops>
                        <GradientStop Color="#EEE" Offset="0"/>
                        <GradientStop Color="#BBB" Offset="0.98"/>
                        <!-- 
               This is the same trick as with the TabPanel_BackgroundBrush (see there).
            -->
                        <GradientStop Color="{StaticResource BorderColor_Base}" 
                          Offset="0.99"/>
                    </LinearGradientBrush.GradientStops>
                </LinearGradientBrush>
                <LinearGradientBrush x:Key="TabItem_BackgroundBrush_Selected" 
                           StartPoint="0,0" EndPoint="0,1">
                    <LinearGradientBrush.GradientStops>
                        <GradientStop Color="#FFFFC14A" Offset="0.1" />
                        <GradientStop Color="{StaticResource TabControl_BackgroundColor_Base}" 
                          Offset="0.15"/>
                        <GradientStop Color="#C5DBF6" Offset="0.8"/>
                        <GradientStop Color="{StaticResource TabControl_BackgroundColor_Base}" 
                          Offset="1.0"/>
                    </LinearGradientBrush.GradientStops>
                </LinearGradientBrush>
                <LinearGradientBrush x:Key="TabItem_BackgroundBrush_Unselected" 
                           StartPoint="0,0" EndPoint="0,1">
                    <LinearGradientBrush.GradientStops>
                        <GradientStop Color="#E8F2FF" Offset="0.0"/>
                        <GradientStop Color="#DFE9F6" Offset="0.3"/>
                        <GradientStop Color="#C7D8EE" Offset="0.7"/>
                        <GradientStop Color="#B9CADE" Offset="0.98"/>
                        <!-- See the TabPanel_BackgroundBrush comment. -->
                        <GradientStop Color="{StaticResource BorderColor_Base}" 
                          Offset="0.99"/>
                    </LinearGradientBrush.GradientStops>
                </LinearGradientBrush>
                <LinearGradientBrush x:Key="TabItem_HoverBackgroundBrush" 
                           EndPoint="0.5,1" StartPoint="0.5,0">
                    <GradientStop Color="#FFFFD5A0" Offset="0.3" />
                    <GradientStop Color="#FFFFA335" Offset="0.51" />
                    <GradientStop Color="#FFFFC14A" Offset="0.98" />
                </LinearGradientBrush>

                <!-- Brushes used for styling TabItems (Foreground/Text) -->
                <SolidColorBrush x:Key="TabItem_TextBrush_Unselected" Color="#4971A3" />
                <SolidColorBrush x:Key="TabItem_TextBrush_Disabled" Color="#888" />
                <SolidColorBrush x:Key="TabItem_TextBrush_Hover" Color="#2D2C8A" />
                <SolidColorBrush x:Key="TabItem_TextBrush_Selected" Color="#0D3288" />

                <!-- Brushes used for styling TabItems (Borders) -->
                <!-- 
         For all borders around the TabItems, we'll have to use either the 
         identical color OR (what's being done here) we'll have to assure the
         bottom of the border will always result in the color that is being
         used for drawing the line between the TabControl and the TabPanel.
      
         If we do use a different (solid) color here, the bottom line will not
         be rendered as desired which I presume is a matter of precedence in the
         way borders are being drawn (anti-clockwise, starting with bottom and
         finishing with left, hence the effect of the left and right edges of 
         the bottom line being drawn with the left and right border respectively).
         If you want to try it out, exchange the LinearGradientBrush with the
         SolidColorBrush that has been commented out and run the app.
         You'll probably have to zoom in to see the effect. 
      -->
                <!--<SolidColorBrush x:Key="TabItem_DisabledBorderBrush" Color="#CCC" />-->
                <LinearGradientBrush x:Key="TabItem_DisabledBorderBrush" 
                           StartPoint="0,0" EndPoint="0,1">
                    <GradientStop Color="#CCC" Offset="0"/>
                    <GradientStop Color="{StaticResource BorderColor_Base}" 
                       Offset="0.8"/>
                </LinearGradientBrush>
                <SolidColorBrush x:Key="TabItem_BorderBrush_Selected" 
                       Color="{StaticResource BorderColor_Base}" />
                <!-- See the comment regarding the TabItem_DisabledBorderBrush above. -->
                <LinearGradientBrush x:Key="TabItem_Border_Unselected" 
                           StartPoint="0,0" EndPoint="0,1">
                    <GradientStop Color="#AAA" Offset="0"/>
                    <GradientStop Color="{StaticResource BorderColor_Base}" 
                       Offset="0.8"/>
                </LinearGradientBrush>
                <LinearGradientBrush x:Key="TabItem_HoverBorderBrush" StartPoint="0,0" 
                           EndPoint="0,1">
                    <LinearGradientBrush.GradientStops>
                        <GradientStop Offset="0.98" Color="DarkOrange"/>
                        <!-- See the TabPanel_BackgroundBrush comment. -->
                        <GradientStop Offset="0.99"
                          Color="{StaticResource BorderColor_Base}"/>
                    </LinearGradientBrush.GradientStops>
                </LinearGradientBrush>

                <!-- 
         Margins for TabItems - these will be set in the respective triggers; 
         also, the transition between two states will be animated using the Storyboards
         below.
      -->
                <Thickness x:Key="TabItemMargin_Base">0,8,-4,0</Thickness>
                <Thickness x:Key="TabItemMargin_Selected">-4,0,-4,0</Thickness>
                <Thickness x:Key="TabItemMargin_Hover_Start">0,2,0,0</Thickness>
                <Thickness x:Key="TabItemMargin_Hover_Final">0,4,0,0</Thickness>
                <!--<Thickness x:Key="TabPanel_Padding">4,0,0,0</Thickness>-->
                <Thickness x:Key="TabPanel_Padding">0</Thickness>
                <Thickness x:Key="TabPanelScrollPanel_Margin">5,0,0,2</Thickness>
                <!--<Thickness x:Key="TabPanel_Padding">0,0,4,0</Thickness>-->

                <!-- Transistion effects (animations) - added in part two -->
                <!-- This will run when a TabItem enters the "Unselected" state -->
                <Storyboard x:Key="TabItemStoryBoard_Unselected">
                    <ThicknessAnimation Storyboard.TargetName="Border" 
                             Storyboard.TargetProperty="Margin"
                             To="{StaticResource TabItemMargin_Base}"
                             FillBehavior="HoldEnd"
                             Duration="0:0:0.1"/>
                </Storyboard>
                <!-- This will run when a TabItem enters the "Selected" state -->
                <Storyboard x:Key="TabItemStoryBoard_Selected">
                    <ThicknessAnimation Storyboard.TargetName="Border" 
                             Storyboard.TargetProperty="Margin"
                             To="{StaticResource TabItemMargin_Selected}" 
                             FillBehavior="HoldEnd"
                             Duration="0:0:0.1"/>
                </Storyboard>
                <!-- This will run when a TabItem enters the "Hover" state -->
                <Storyboard x:Key="TabItemStoryBoard_Hover">
                    <ThicknessAnimationUsingKeyFrames Storyboard.TargetName="Border" 
                                           Storyboard.TargetProperty="Margin"
                                           FillBehavior="HoldEnd">
                        <SplineThicknessKeyFrame KeyTime="0:0:0.1"
                                     Value="{StaticResource TabItemMargin_Hover_Start}"/>
                        <SplineThicknessKeyFrame KeyTime="0:0:0.2"
                                     Value="{StaticResource TabItemMargin_Hover_Final}"/>
                    </ThicknessAnimationUsingKeyFrames>
                </Storyboard>

                <!-- The colors that will be used when assembling the brushes for the LineButtons-->
                <Color x:Key="LineButtonBackgroundColor_Bright">LightGoldenrodYellow</Color>
                <Color x:Key="LineButtonBackgroundColor_Dark">#FAEEB1</Color>
                <Color x:Key="LineButtonBackgroundColorDisabled_Bright">#EEE</Color>
                <Color x:Key="LineButtonBackgroundColorDisabled_Dark">#999</Color>

                <!-- Color of the border around the scrollbar-thumb -->
                <SolidColorBrush x:Key="LineButtonBorderBrush" Color="#FF8693BD"/>

                <!-- The color for the scrollbar's line-buttons when the mouse hovers over them -->
                <LinearGradientBrush x:Key="LineButtonHoverBrush" StartPoint="0.5,0" EndPoint="0.5,1">
                    <GradientStop Color="#FFFFD5A0" Offset="0.3"/>
                    <GradientStop Color="#FFFFA335" Offset="0.51"/>
                    <GradientStop Color="#FFFFC14A" Offset="0.986"/>
                </LinearGradientBrush>

                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" x:Key="LineButtonBackgroundBrush">
                    <GradientStop Offset="0.3" Color="{StaticResource LineButtonBackgroundColor_Bright}"/>
                    <GradientStop Offset="0.4" Color="{StaticResource LineButtonBackgroundColor_Dark}"/>
                    <GradientStop Offset="1" Color="{StaticResource LineButtonBackgroundColor_Bright}"/>
                </LinearGradientBrush>


                <!-- The color for the scrollbar's line-buttons when they're clicked/pressed -->
                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" x:Key="LineButtonPressedBrush">
                    <GradientStop Offset="0" Color="{StaticResource LineButtonBackgroundColor_Bright}"/>
                    <GradientStop Offset="0.6" Color="{StaticResource LineButtonBackgroundColor_Dark}"/>
                    <GradientStop Offset="0.7" Color="{StaticResource LineButtonBackgroundColor_Bright}"/>
                </LinearGradientBrush>

                <!-- The color to be used when drawing the arrows on the scrollbar's line-buttons -->
                <SolidColorBrush x:Key="LineButtonBrush" Color="#FFFFFF"/>

                <!-- The color for the scrollbar's line-buttons when they're disabled -->
                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" x:Key="LineButtonDisabledBrush">
                    <GradientStop Offset="0" Color="{StaticResource LineButtonBackgroundColorDisabled_Bright}"/>
                    <GradientStop Offset="1" Color="{StaticResource LineButtonBackgroundColorDisabled_Dark}"/>
                </LinearGradientBrush>

                <!--
         The Geometries below will be used to render the ScrollViewer's LineLeft-,
         LineRight- and TabMenu-buttons.
      -->
                <Geometry x:Key="ArrowUp">M 0 6 L 12 6 L 6 0 Z</Geometry>
                <Geometry x:Key="ArrowDown">M 0 0 L 6 6 L 12 0 Z</Geometry>

                <!-- 
         Definitions for the Path-Geometries that are being used to render
         the ScrollViewer's LineButtons.
      -->
                <Path x:Key="UpArrowPath"
            Margin="4,3"
            Data="{StaticResource ArrowUp}"
            Stroke="{StaticResource LineButtonBrush}" 
            Fill="{StaticResource LineButtonBrush}"
            Stretch="Fill"
            VerticalAlignment="Center"
            HorizontalAlignment="Center"/>
                <Path x:Key="DownArrowPath"
            Margin="4,3"
            Data="{StaticResource ArrowDown}"
            Stroke="{StaticResource LineButtonBrush}" 
            Fill="{StaticResource LineButtonBrush}"
            Stretch="Fill"
            VerticalAlignment="Center"
            HorizontalAlignment="Center"/>

                <!-- 
         This determines how wide/high the LineButtons will be rendered.
      -->
                <sys:Double x:Key="ButtonWidthAndHeight">16</sys:Double>

                <!-- Styles for the LineButtons -->
                <Style x:Key="LineButtonStyle" TargetType="{x:Type RepeatButton}">
                    <Setter Property="Focusable" Value="False"/>
                    <Setter Property="Height" Value="{StaticResource ButtonWidthAndHeight}"/>
                    <Setter Property="Width" Value="{StaticResource ButtonWidthAndHeight}"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type RepeatButton}">
                                <Border Name="ButtonBorder" Margin="1"
                          BorderBrush="{StaticResource LineButtonBorderBrush}" 
                          Background="#939589" 
                          CornerRadius="1" 
                          BorderThickness="1" TextBlock.Foreground="White">
                                    <ContentPresenter HorizontalAlignment="Stretch"
                                       VerticalAlignment="Stretch"/>
                                </Border>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsMouseOver" Value="true">
                                        <Setter TargetName="ButtonBorder" Property="Background" 
                                Value="{Binding Source={StaticResource colorSource}, Path=Instance.MouseOver}" />
                                    </Trigger>
                                    <Trigger Property="IsPressed" Value="true">
                                        <Setter TargetName="ButtonBorder" Property="Background" 
                                Value="{Binding Source={StaticResource colorSource}, Path=Instance.MousePressed}" />
                                    </Trigger>
                                    <Trigger Property="IsEnabled" Value="False">
                                        <Setter Property="Visibility" Value="Hidden"/>
                                        <Setter TargetName="ButtonBorder" Property="Background" 
                                Value="{StaticResource LineButtonDisabledBrush}" />
                                        <Setter TargetName="ButtonBorder" Property="Opacity" 
                                Value="0.4"/>
                                    </Trigger>
                                    <Trigger Property="IsEnabled" Value="true">
                                        <Setter Property="Visibility" Value="Visible"/>
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>



                <!-- The TabControl's Style. -->
                <Style TargetType="{x:Type TabControl}" x:Key="ScrolltabStyle" x:Name="TabControl">
                    <Setter Property="SnapsToDevicePixels" Value="true"/>
                    <Setter Property="BorderThickness" Value="1"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="TabControl">
                                <Grid KeyboardNavigation.TabNavigation="Local">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="*"/>
                                    </Grid.ColumnDefinitions>
                                    <Border Name="TabPanelBorder" Height="Auto" Background="White">
                                        <ScrollViewer SnapsToDevicePixels="True"
                                      Name="svTP"
                                      Grid.Column="0"
                                      HorizontalScrollBarVisibility="Hidden" 
                                      VerticalScrollBarVisibility="Disabled">
                                            <ScrollViewer.Style>
                                                <Style TargetType="{x:Type ScrollViewer}">
                                                    <Setter Property="Focusable" Value="False"/>
                                                    <Setter Property="Template">
                                                        <Setter.Value>
                                                            <ControlTemplate>
                                                                <Grid SnapsToDevicePixels="True" Grid.Row="0" Grid.Column="0">
                                                                    <Grid.RowDefinitions>
                                                                        <RowDefinition Height="*"/>
                                                                        <RowDefinition Height="Auto"/>
                                                                    </Grid.RowDefinitions>                                                                   
                                                                    <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" VirtualizingStackPanel.IsVirtualizing="False"                                                    
                                                                               SnapsToDevicePixels="True" Grid.Row="0" Content="{TemplateBinding ScrollViewer.Content}" VerticalAlignment="Top">
                                                                        <ContentPresenter.LayoutTransform>
                                                                            <RotateTransform Angle="270" />
                                                                        </ContentPresenter.LayoutTransform>
                                                                    </ScrollContentPresenter>
                                                                    <Grid x:Name="gScrollButtons" HorizontalAlignment="Right" Grid.Row="1">
                                                                        <Grid.ColumnDefinitions>
                                                                            <ColumnDefinition Width="*"/>
                                                                            <ColumnDefinition Width="Auto"/>
                                                                        </Grid.ColumnDefinitions>
                                                                        <WrapPanel Grid.Column="1" Orientation="Horizontal" Margin="{StaticResource TabPanelScrollPanel_Margin}">
                                                                            <RepeatButton Style="{StaticResource LineButtonStyle}" Command="ScrollBar.PageLeftCommand"
                                                                                        Content="{StaticResource UpArrowPath}" IsEnabled="{Binding ElementName=svTP, Path=HorizontalOffset, 
                                                                                      Converter={StaticResource scrollbarOnFarLeftConverter}}" >
                                                                                <RepeatButton.ToolTip>
                                                                                    <Border Background="White" BorderBrush="#ADAAAD" BorderThickness="0.5" Margin="-5">

                                                                                        <TextBlock Text="Scroll Up" Grid.Row="0" Padding="10,5,10,0" FontWeight="Bold" FontFamily="Calibri" ></TextBlock>

                                                                                    </Border>
                                                                                </RepeatButton.ToolTip>
                                                                            </RepeatButton>

                                                                            <RepeatButton Style="{StaticResource LineButtonStyle}" Command="ScrollBar.PageRightCommand"
                                                                                        Content="{StaticResource DownArrowPath}">
                                                                                <RepeatButton.IsEnabled>
                                                                                    <MultiBinding Converter="{StaticResource scrollbarOnFarRightConverter}">
                                                                                        <Binding ElementName="svTP" Path="HorizontalOffset"/>
                                                                                        <Binding ElementName="svTP" Path="ViewportWidth"/>
                                                                                        <Binding ElementName="svTP" Path="ExtentWidth"/>
                                                                                    </MultiBinding>
                                                                                </RepeatButton.IsEnabled>
                                                                                <RepeatButton.ToolTip>
                                                                                    <Border Background="White" BorderBrush="#ADAAAD" BorderThickness="0.5" Margin="-5">

                                                                                        <TextBlock Text="Scroll Down" Grid.Row="0" Padding="10,5,10,0" FontWeight="Bold" FontFamily="Calibri" ></TextBlock>

                                                                                    </Border>
                                                                                </RepeatButton.ToolTip>
                                                                            </RepeatButton>
                                                                        </WrapPanel>
                                                                    </Grid>
                                                                </Grid>
                                                                <ControlTemplate.Triggers>
                                                                    <DataTrigger Value="false">
                                                                        <DataTrigger.Binding>
                                                                            <MultiBinding Converter="{StaticResource  scrollbarOnFarRightConverter}">
                                                                                <Binding ElementName="svTP" Path="HorizontalOffset"/>
                                                                                <Binding ElementName="svTP" Path="ViewportWidth"/>
                                                                                <Binding ElementName="svTP" Path="ExtentWidth"/>
                                                                            </MultiBinding>
                                                                        </DataTrigger.Binding>
                                                                    </DataTrigger>
                                                                </ControlTemplate.Triggers>
                                                            </ControlTemplate>
                                                        </Setter.Value>
                                                    </Setter>
                                                </Style>
                                            </ScrollViewer.Style>
                                            <StackPanel Name="TabPanel"
                                     Orientation="Horizontal"
                                     IsItemsHost="true" 
                                     Margin="{StaticResource TabPanel_Padding}"                                  
                                     KeyboardNavigation.TabIndex="1"/>

                                        </ScrollViewer>
                                    </Border>
                                    <Border BorderThickness="1" 
                             Grid.Column="1" 
                             
                             BorderBrush="#D6D7D6" 
                             Background="White">
                                        <ContentPresenter x:Name="PART_SelectedContentHost"
                                                ContentSource="SelectedContent" 
                                                Margin="0">
                                        </ContentPresenter>

                                    </Border>
                                </Grid>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
</ResourceDictionary>